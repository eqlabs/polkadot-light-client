From 86fff3fb97b56a991255f9d845743739ddb82d30 Mon Sep 17 00:00:00 2001
From: Mariusz Pilarek <mariusz@eiger.co>
Date: Wed, 9 Nov 2022 10:50:03 +0100
Subject: [PATCH] Fixed compiler errors.

---
 src/emscripten-optimizer/istring.h | 4 ++--
 src/passes/CoalesceLocals.cpp      | 2 +-
 src/support/safe_integer.cpp       | 4 ++--
 3 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/emscripten-optimizer/istring.h b/src/emscripten-optimizer/istring.h
index 5c3b094c3..5752336cc 100644
--- a/src/emscripten-optimizer/istring.h
+++ b/src/emscripten-optimizer/istring.h
@@ -161,13 +161,13 @@ struct IString {
 
 namespace std {
 
-template<> struct hash<cashew::IString> : public unary_function<cashew::IString, size_t> {
+template<> struct hash<cashew::IString> {
   size_t operator()(const cashew::IString& str) const {
     return std::hash<size_t>{}(size_t(str.str));
   }
 };
 
-template<> struct equal_to<cashew::IString> : public binary_function<cashew::IString, cashew::IString, bool> {
+template<> struct equal_to<cashew::IString> {
   bool operator()(const cashew::IString& x, const cashew::IString& y) const {
     return x == y;
   }
diff --git a/src/passes/CoalesceLocals.cpp b/src/passes/CoalesceLocals.cpp
index 1bcc74f79..d1a45347d 100644
--- a/src/passes/CoalesceLocals.cpp
+++ b/src/passes/CoalesceLocals.cpp
@@ -255,7 +255,7 @@ void CoalesceLocals::pickIndicesFromOrder(std::vector<Index>& order, std::vector
     // merge new interferences and copies for the new index
     for (Index k = i + 1; k < numLocals; k++) {
       auto j = order[k]; // go in the order, we only need to update for those we will see later
-      newInterferences[found * numLocals + j] = newInterferences[found * numLocals + j] | interferes(actual, j);
+      newInterferences[found * numLocals + j] = newInterferences[found * numLocals + j] || interferes(actual, j);
       newCopies[found * numLocals + j] += getCopies(actual, j);
     }
   }
diff --git a/src/support/safe_integer.cpp b/src/support/safe_integer.cpp
index ca5052cd2..d6f38bdb6 100644
--- a/src/support/safe_integer.cpp
+++ b/src/support/safe_integer.cpp
@@ -50,12 +50,12 @@ int32_t wasm::toSInteger32(double x) {
 
 bool wasm::isUInteger64(double x) {
   return !std::signbit(x) && isInteger(x) &&
-         x <= std::numeric_limits<uint64_t>::max();
+         x <= static_cast<double>(std::numeric_limits<uint64_t>::max());
 }
 
 bool wasm::isSInteger64(double x) {
   return isInteger(x) && x >= std::numeric_limits<int64_t>::min() &&
-         x <= std::numeric_limits<int64_t>::max();
+         x <= static_cast<double>(std::numeric_limits<int64_t>::max());
 }
 
 uint64_t wasm::toUInteger64(double x) {
-- 
2.32.1 (Apple Git-133)

